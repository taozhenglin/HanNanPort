package com.cn.hainanproject.view;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.PixelFormat;
import android.graphics.Rect;
import android.os.Handler;
import android.os.Vibrator;
import android.util.AttributeSet;
import android.view.Gravity;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.GridView;
import android.widget.ImageView;

/**
 * @blog http://blog.csdn.net/xiaanming 
 * 
 * @author xiaanming
 *
 */
@SuppressLint("NewApi")
public class DragGridView extends GridView{
	//?¤°??ì???±??
	private long dragResponseMS = 500;
	
	/**
	 * ??·???????×§????????????
	 */
	private boolean isDrag = true;
	
	private int mDownX;
	private int mDownY;
	private int moveX;
	private int moveY;
	/**
	 * ??????×§??position
	 */
	private int mDragPosition;
	
	/**
	 * ????????×§??item??????View
	 */
	private View mStartDragItemView = null;
	
	/**
	 * ??????×§?????????????±????????ImageView
	 */
	private ImageView mDragImageView;
	
	/**
	 * ?????÷
	 */
	private Vibrator mVibrator;
	
	private WindowManager mWindowManager;
	/**
	 * item??????????????
	 */
	private WindowManager.LayoutParams mWindowLayoutParams;
	
	/**
	 * ??????×§??item??????Bitmap
	 */
	private Bitmap mDragBitmap;
	
	/**
	 * °??????????ù??item±????à??
	 */
	private int mPoint2ItemTop ; 
	
	/**
	 * °??????????ù??item??×ó±??????à??
	 */
	private int mPoint2ItemLeft;
	
	/**
	 * DragGridView?à??????????????????
	 */
	private int mOffset2Top;
	
	/**
	 * DragGridView?à??????×ó±?????????
	 */
	private int mOffset2Left;
	
	/**
	 * ×???????????
	 */
	private int mStatusHeight; 
	
	/**
	 * DragGridView×????ò????????±?????
	 */
	private int mDownScrollBorder;
	
	/**
	 * DragGridView×????ò????????±?????
	 */
	private int mUpScrollBorder;
	
	/**
	 * DragGridView×?????????????
	 */
	private static final int speed = 80;
	
	/**
	 * item·??ú±??????÷??????
	 */
	private OnChanageListener onChanageListener;
	
	
	
	public DragGridView(Context context) {
		this(context, null);
	}
	
	public DragGridView(Context context, AttributeSet attrs) {
		this(context, attrs, 0);
	}

	public DragGridView(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);
		mVibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);
		mWindowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
		mStatusHeight = getStatusHeight(context); //????×???????????
	}
	
	private Handler mHandler = new Handler();
	
	//???????í??·????¤°???Runnable
	private Runnable mLongClickRunnable = new Runnable() {
		
		@Override
		public void run() {
			isDrag = true; //?è????????×§
			mVibrator.vibrate(50); //????????
			mStartDragItemView.setVisibility(View.INVISIBLE);//??????item
			
			//?ù??????°???????????item????
			createDragImage(mDragBitmap, mDownX, mDownY);
		}
	};
	
	/**
	 * ?è?????÷????
	 * @param onChanageListener
	 */
	public void setOnChangeListener(OnChanageListener onChanageListener){
		this.onChanageListener = onChanageListener;
	}
	
	/**
	 * ?è???ì????×§????????????????1000????
	 * @param dragResponseMS
	 */
	public void setDragResponseMS(long dragResponseMS) {
		this.dragResponseMS = dragResponseMS;
	}

	@Override
	public boolean dispatchTouchEvent(MotionEvent ev) {
		switch(ev.getAction()){
		case MotionEvent.ACTION_DOWN:
			//????Handler????dragResponseMS????mLongClickRunnable
			mHandler.postDelayed(mLongClickRunnable, dragResponseMS);
			
			mDownX = (int) ev.getX();
			mDownY = (int) ev.getY();
			
			//?ù??°?????X,Y×?±ê?????ù???÷item??position
			mDragPosition = pointToPosition(mDownX, mDownY);
			
			if(mDragPosition == AdapterView.INVALID_POSITION){
				return super.dispatchTouchEvent(ev);
			}
			
			//?ù??position??????item?ù??????View
			mStartDragItemView = getChildAt(mDragPosition - getFirstVisiblePosition());
			
			//???????????à???ó?????????????????????????????í????
			mPoint2ItemTop = mDownY - mStartDragItemView.getTop();
			mPoint2ItemLeft = mDownX - mStartDragItemView.getLeft();
			
			mOffset2Top = (int) (ev.getRawY() - mDownY);
			mOffset2Left = (int) (ev.getRawX() - mDownX);
			
			//????DragGridView×????ò????????????????????????????DragGridView?ò??????
			mDownScrollBorder = getHeight() /4;
			//????DragGridView×????ò?????????????????ó??????????DragGridView?ò??????
			mUpScrollBorder = getHeight() * 3/4;
			
			
			
			//????mDragItemView????????
			mStartDragItemView.setDrawingCacheEnabled(true);
			//????mDragItemView??????????Bitmap???ó
			mDragBitmap = Bitmap.createBitmap(mStartDragItemView.getDrawingCache());
			//???????????ü????·???????????±?????????????????
			mStartDragItemView.destroyDrawingCache();
			
			
			break;
		case MotionEvent.ACTION_MOVE:
			int moveX = (int)ev.getX();
			int moveY = (int) ev.getY();
			
			//??????????°?????item????????????????????item??±???????????????mRunnable
			if(!isTouchInItem(mStartDragItemView, moveX, moveY)){
				mHandler.removeCallbacks(mLongClickRunnable);
			}
			break;
		case MotionEvent.ACTION_UP:
			mHandler.removeCallbacks(mLongClickRunnable);
			mHandler.removeCallbacks(mScrollRunnable);
			break;
		}
		return super.dispatchTouchEvent(ev);
	}

	
	/**
	 * ??·????÷??GridView??item????
	 * @param dragView
	 * @param x
	 * @param y
	 * @return
	 */
	private boolean isTouchInItem(View dragView, int x, int y){
		int leftOffset = dragView.getLeft();
		int topOffset = dragView.getTop();
		if(x < leftOffset || x > leftOffset + dragView.getWidth()){
			return false;
		}
		
		if(y < topOffset || y > topOffset + dragView.getHeight()){
			return false;
		}
		
		return true;
	}
	
	

	@Override
	public boolean onTouchEvent(MotionEvent ev) {
		if(isDrag && mDragImageView != null){
			switch(ev.getAction()){
			case MotionEvent.ACTION_MOVE:
				moveX = (int) ev.getX();
				moveY = (int) ev.getY();
				//????item
				onDragItem(moveX, moveY);
				break;
			case MotionEvent.ACTION_UP:
				onStopDrag();
				isDrag = false;
				break;
			}
			return true;
		}
		return super.onTouchEvent(ev);
	}
	
	
	/**
	 * ???¨??????????
	 * @param bitmap 
	 * @param downX
	 * 			°????????à??????????X×?±ê
	 * @param downY
	 * 			°????????à??????????X×?±ê
	 */
	private void createDragImage(Bitmap bitmap, int downX , int downY){
		mWindowLayoutParams = new WindowManager.LayoutParams();
		mWindowLayoutParams.format = PixelFormat.TRANSLUCENT; //????????????????·????÷
		mWindowLayoutParams.gravity = Gravity.TOP | Gravity.LEFT;
		mWindowLayoutParams.x = downX - mPoint2ItemLeft + mOffset2Left;
		mWindowLayoutParams.y = downY - mPoint2ItemTop + mOffset2Top - mStatusHeight;
		mWindowLayoutParams.alpha = 0.55f; //???÷??
		mWindowLayoutParams.width = WindowManager.LayoutParams.WRAP_CONTENT;  
		mWindowLayoutParams.height = WindowManager.LayoutParams.WRAP_CONTENT;  
		mWindowLayoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE  
	                | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE ;
		  
		mDragImageView = new ImageView(getContext());  
		mDragImageView.setImageBitmap(bitmap);  
		mWindowManager.addView(mDragImageView, mWindowLayoutParams);  
	}
	
	/**
	 * ??????????????????????
	 */
	private void removeDragImage(){
		if(mDragImageView != null){
			mWindowManager.removeView(mDragImageView);
			mDragImageView = null;
		}
	}
	
	/**
	 * ????item??????????????item???????????ü????item???à?????????°GridView??×???????
	 * @param moveX
	 * @param moveY
	 */
	private void onDragItem(int moveX, int moveY){
		mWindowLayoutParams.x = moveX - mPoint2ItemLeft + mOffset2Left;
		mWindowLayoutParams.y = moveY - mPoint2ItemTop + mOffset2Top - mStatusHeight;
		mWindowManager.updateViewLayout(mDragImageView, mWindowLayoutParams); //?ü????????????
		onSwapItem(moveX, moveY);
		
		//GridView×???????
		mHandler.post(mScrollRunnable);
	}
	
	
	/**
	 * ?±moveY?????ó???ò????????±?????????·?GridView×????ò??????
	 * ?±moveY?????????ò????????±?????????·?GridView×????ò??????
	 * ·??ò??????????
	 */
	private Runnable mScrollRunnable = new Runnable() {
		
		@Override
		public void run() {
			int scrollY;
			if(moveY > mUpScrollBorder){
				 scrollY = -speed;
				 mHandler.postDelayed(mScrollRunnable, 25);
			}else if(moveY < mDownScrollBorder){
				scrollY = speed;
				 mHandler.postDelayed(mScrollRunnable, 25);
			}else{
				scrollY = 0;
				mHandler.removeCallbacks(mScrollRunnable);
			}
			
			//?±??????????????GridView?ò???ò???ò?????????????????±?ò????????????????????????????DragGridView??×?????????
			//?ù?????????????÷????onSwapItem()·?·¨??????item
			onSwapItem(moveX, moveY);
			
			View view = getChildAt(mDragPosition - getFirstVisiblePosition());
			//????GridView??×???????
			smoothScrollToPositionFromTop(mDragPosition, view.getTop() + scrollY);
		}
	};
	
	
	/**
	 * ????item,????????item?????????????????§??
	 * @param moveX
	 * @param moveY
	 */
	private void onSwapItem(int moveX, int moveY){
		//????????????????????????item??position
		int tempPosition = pointToPosition(moveX, moveY);
		
		//????tempPosition ??±???????tempPosition??????-1,?ò????????
		if(tempPosition != mDragPosition && tempPosition != AdapterView.INVALID_POSITION){
			getChildAt(tempPosition - getFirstVisiblePosition()).setVisibility(View.INVISIBLE);//????????????item,????item??????
			getChildAt(mDragPosition - getFirstVisiblePosition()).setVisibility(View.VISIBLE);//???°??item????????
			
			if(onChanageListener != null){
				onChanageListener.onChange(mDragPosition, tempPosition);
			}
			
			mDragPosition = tempPosition;
		}
	}
	
	
	/**
	 * ??????×§?????????°??????item??????????????????????
	 */
	private void onStopDrag(){
		getChildAt(mDragPosition - getFirstVisiblePosition()).setVisibility(View.VISIBLE);
		removeDragImage();
	}
	
	/**
	 * ????×???????????
	 * @param context
	 * @return
	 */
	private static int getStatusHeight(Context context){
        int statusHeight = 0;
        Rect localRect = new Rect();
        ((Activity) context).getWindow().getDecorView().getWindowVisibleDisplayFrame(localRect);
        statusHeight = localRect.top;
        if (0 == statusHeight){
            Class<?> localClass;
            try {
                localClass = Class.forName("com.android.internal.R$dimen");
                Object localObject = localClass.newInstance();
                int i5 = Integer.parseInt(localClass.getField("status_bar_height").get(localObject).toString());
                statusHeight = context.getResources().getDimensionPixelSize(i5);
            } catch (Exception e) {
                e.printStackTrace();
            } 
        }
        return statusHeight;
    }

	
	/**
	 * 
	 * @author xiaanming
	 *
	 */
	public interface OnChanageListener{
		
		/**
		 * ?±item???????????±?ò???÷??·?·¨?????????è??????·?·¨????????????????????
		 * @param form
		 * 			??????position
		 * @param to 
		 * 			??×§????position
		 */
		public void onChange(int form, int to);
	}
}
